// Code generated by scripts/tmpl-to-go. DO NOT EDIT.
package ast

/*
type Node struct {
	Positions *Positions
}
*/

var _ Node = &Text{}

func (x *Text) HasPositions() bool {
	return x.Positions != nil
}

func (x *Text) Begin() Position {
	if x.Positions != nil {
		return x.Positions.Begin
	}
	return Position{}
}

func (x *Text) End() Position {
	if x.Positions != nil {
		return x.Positions.End
	}
	return Position{}
}

var _ Node = &NumberSign{}

func (x *NumberSign) HasPositions() bool {
	return x.Positions != nil
}

func (x *NumberSign) Begin() Position {
	if x.Positions != nil {
		return x.Positions.Begin
	}
	return Position{}
}

func (x *NumberSign) End() Position {
	if x.Positions != nil {
		return x.Positions.End
	}
	return Position{}
}

var _ Node = &PlainArg{}

func (x *PlainArg) HasPositions() bool {
	return x.Positions != nil
}

func (x *PlainArg) Begin() Position {
	if x.Positions != nil {
		return x.Positions.Begin
	}
	return Position{}
}

func (x *PlainArg) End() Position {
	if x.Positions != nil {
		return x.Positions.End
	}
	return Position{}
}

var _ Node = &PluralArg{}

func (x *PluralArg) HasPositions() bool {
	return x.Positions != nil
}

func (x *PluralArg) Begin() Position {
	if x.Positions != nil {
		return x.Positions.Begin
	}
	return Position{}
}

func (x *PluralArg) End() Position {
	if x.Positions != nil {
		return x.Positions.End
	}
	return Position{}
}

var _ Node = &SelectArg{}

func (x *SelectArg) HasPositions() bool {
	return x.Positions != nil
}

func (x *SelectArg) Begin() Position {
	if x.Positions != nil {
		return x.Positions.Begin
	}
	return Position{}
}

func (x *SelectArg) End() Position {
	if x.Positions != nil {
		return x.Positions.End
	}
	return Position{}
}

var _ Node = &SimpleArg{}

func (x *SimpleArg) HasPositions() bool {
	return x.Positions != nil
}

func (x *SimpleArg) Begin() Position {
	if x.Positions != nil {
		return x.Positions.Begin
	}
	return Position{}
}

func (x *SimpleArg) End() Position {
	if x.Positions != nil {
		return x.Positions.End
	}
	return Position{}
}
